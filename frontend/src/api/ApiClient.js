import api from './client';

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö API-–∫–ª–∏–µ–Ω—Ç–æ–≤
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
export class ApiClient {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API-–∫–ª–∏–µ–Ω—Ç–∞
   * @param {string} basePath - –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/salons`)
   * @param {string} resourceName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–∞–ª–æ–Ω')
   */
  constructor(basePath, resourceName) {
    this.basePath = basePath;
    this.resourceName = resourceName || '—Ä–µ—Å—É—Ä—Å';
    this.api = api;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @param {boolean} noCache - –§–ª–∞–≥ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ 
   */
  async getAll(params = {}, noCache = false) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ ${this.resourceName}–æ–≤`);
      
      const queryParams = noCache ? { ...params, ...api.noCacheParams() } : params;
      const response = await api.get(this.basePath, { params: queryParams });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${this.resourceName}–æ–≤:`, response.data.length, '–∑–∞–ø–∏—Å–µ–π');
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ${this.resourceName}–æ–≤:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID
   * @param {number|string} id - ID –æ–±—ä–µ–∫—Ç–∞
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  async getById(id, params = {}) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å ${this.resourceName}–∞ #${id}`);
      
      const response = await api.get(`${this.basePath}/${id}`, { params });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${this.resourceName}–∞ #${id}`);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ${this.resourceName}–∞ #${id}:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
   */
  async create(data) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ${this.resourceName}–∞:`, data);
      
      const response = await api.post(this.basePath, data);
      
      console.log(`‚úÖ ${this.resourceName} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${this.resourceName}–∞:`, error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
   * @param {number|string} id - ID –æ–±—ä–µ–∫—Ç–∞
   * @param {Object} data - –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
   */
  async update(id, data) {
    try {
      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${this.resourceName}–∞ #${id}:`, data);
      
      const response = await api.put(`${this.basePath}/${id}`, data);
      
      console.log(`‚úÖ ${this.resourceName} #${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${this.resourceName}–∞ #${id}:`, error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   * @param {number|string} id - ID –æ–±—ä–µ–∫—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async delete(id) {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${this.resourceName}–∞ #${id}`);
      
      const response = await api.delete(`${this.basePath}/${id}`);
      
      console.log(`‚úÖ ${this.resourceName} #${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${this.resourceName}–∞ #${id}:`, error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
      throw error;
    }
  }
} 
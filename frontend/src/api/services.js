import { ApiClient } from './ApiClient';

// API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
class ServiceApiClient extends ApiClient {
  constructor() {
    super('/services', '—É—Å–ª—É–≥–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞
   * @param {number} salonId ID —Å–∞–ª–æ–Ω–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —É—Å–ª—É–≥
   */
  async getBySalon(salonId) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}`);
      
      const response = await this.api.get(`${this.basePath}/salon/${salonId}`);
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}:`, response.data.length, '–∑–∞–ø–∏—Å–µ–π');
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏
   * @param {number} id ID —É—Å–ª—É–≥–∏
   * @param {number} employeeId ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   * @param {string} date –î–∞—Ç–∞ (YYYY-MM-DD)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  async getAvailability(id, employeeId, date) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ #${id}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ #${employeeId} –Ω–∞ ${date}`);
      
      const response = await this.api.get(`${this.basePath}/${id}/availability`, {
        params: { employee_id: employeeId, date },
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏ #${id}:`, response.data.length, '—Å–ª–æ—Ç–æ–≤');
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:`, error);
      throw error;
    }
  }
}

export const serviceApi = new ServiceApiClient(); 
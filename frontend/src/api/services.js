import { ApiClient } from './ApiClient';

// API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
class ServiceApiClient extends ApiClient {
  constructor() {
    super('/services', '—É—Å–ª—É–≥–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞
   * @param {number} salonId ID —Å–∞–ª–æ–Ω–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —É—Å–ª—É–≥
   */
  async getBySalon(salonId) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}`);
      
      const response = await this.api.get(`${this.basePath}/salon/${salonId}`);
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}:`, response.data.length, '–∑–∞–ø–∏—Å–µ–π');
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏
   * @param {number} id ID —É—Å–ª—É–≥–∏
   * @param {number} employeeId ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   * @param {string} date –î–∞—Ç–∞ (YYYY-MM-DD)
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  async getAvailability(id, employeeId, date) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ #${id}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ #${employeeId} –Ω–∞ ${date}`);
      
      const response = await this.api.get(`${this.basePath}/${id}/availability`, {
        params: { employee_id: employeeId, date },
      });
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏ #${id}:`, response.data.length, '—Å–ª–æ—Ç–æ–≤');
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:`, error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞
   * @param {number} salonId ID —Å–∞–ª–æ–Ω–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
   */
  async getCategories(salonId) {
    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}`);
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        const response = await this.api.get('/services/service-categories', {
          params: { salon_id: salonId }
        });
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ #${salonId}:`, response.data.length, '–∑–∞–ø–∏—Å–µ–π');
        return response.data;
      } catch (apiError) {
        // –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (404), –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É—Å–ª—É–≥
        if (apiError.response && apiError.response.status === 404) {
          console.log(`‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É—Å–ª—É–≥`);
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–∞–ª–æ–Ω–∞
          const services = await this.getBySalon(salonId);
          
          if (!services || services.length === 0) {
            console.log(`‚ö†Ô∏è –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            return [];
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É—Å–ª—É–≥
          const uniqueCategories = [...new Set(services.map(service => service.category))]
            .filter(Boolean)
            .map((name, index) => ({
              id: `extracted-${index}`,
              name,
              description: '–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —É—Å–ª—É–≥',
              color: this._getCategoryColor(name),
              sort_order: index,
              salon_id: salonId,
              is_extracted: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            }));
          
          console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —É—Å–ª—É–≥:`, uniqueCategories.length, '–∑–∞–ø–∏—Å–µ–π');
          return uniqueCategories;
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
          throw apiError;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥:`, error);
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    }
  }
  
  // Helper method to generate consistent colors for categories
  _getCategoryColor(name) {
    const colors = [
      '#673ab7', '#3f51b5', '#2196f3', '#009688', '#4caf50',
      '#8bc34a', '#cddc39', '#ffc107', '#ff9800', '#ff5722'
    ];
    
    // Use the sum of character codes to create a deterministic color
    const charSum = name.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0);
    return colors[charSum % colors.length];
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
   * @param {Object} categoryData –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  async createCategory(categoryData) {
    try {
      console.log(`üîç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:`, categoryData);
      
      const response = await this.api.post('/services/service-categories', categoryData);
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:`, error);
      throw error;
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
   * @param {number} categoryId ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {Object} categoryData –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   */
  async updateCategory(categoryId, categoryData) {
    try {
      console.log(`üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ #${categoryId}:`, categoryData);
      
      const response = await this.api.put(`/services/service-categories/${categoryId}`, categoryData);
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ #${categoryId}:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:`, error);
      throw error;
    }
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
   * @param {number} categoryId ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteCategory(categoryId) {
    try {
      console.log(`üîç –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ #${categoryId}`);
      
      const response = await this.api.delete(`/services/service-categories/${categoryId}`);
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ #${categoryId}`);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥:`, error);
      throw error;
    }
  }
}

export const serviceApi = new ServiceApiClient(); 
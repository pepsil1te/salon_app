import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Card, 
  CardContent,
  CardHeader,
  Grid,
  Divider,
  CircularProgress,
  Button,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Paper,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  TextField,
  List,
  ListItem,
  ListItemText,
  Alert,
  Chip,
  Avatar,
  Rating,
  Tooltip
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation } from 'react-query';
import { serviceApi } from '../../api/services';
import { employeeApi } from '../../api/employees';
import { appointmentApi } from '../../api/appointments';
import { useAuthContext } from '../../contexts/AuthContext';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import ruLocale from 'date-fns/locale/ru';
import { format, isSameDay, isAfter, addDays, isValid } from 'date-fns';
import EventAvailableIcon from '@mui/icons-material/EventAvailable';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';

const steps = [
  { label: '–í—ã–±–æ—Ä –¥–∞—Ç—ã', description: '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏' },
  { label: '–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞', description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞' },
  { label: '–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏', description: '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è' },
  { label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', description: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
];

const BookingForm = () => {
  const { salonId, serviceId } = useParams();
  const navigate = useNavigate();
  const { user, isLoading: isLoadingAuth } = useAuthContext();
  
  // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('üîç BookingForm –∑–∞–≥—Ä—É–∂–µ–Ω:', { 
    salonId, 
    serviceId,
    user, 
    pathname: window.location.pathname
  });
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  useEffect(() => {
    if (!isLoadingAuth && (!user || user.role !== 'client')) {
      console.log('‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
      navigate('/login');
    }
  }, [user, isLoadingAuth, navigate]);
  
  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoadingAuth) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
        <Typography variant="body1" sx={{ ml: 2 }}>
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
        </Typography>
      </Box>
    );
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∫–ª–∏–µ–Ω—Ç, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  if (!user || user.role !== 'client') {
    return null; // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ useEffect
  }
  
  const [activeStep, setActiveStep] = useState(0);
  const [selectedDate, setSelectedDate] = useState(addDays(new Date(), 1));
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [selectedTime, setSelectedTime] = useState(null);
  const [note, setNote] = useState('');
  const [bookingComplete, setBookingComplete] = useState(false);
  const [bookingError, setBookingError] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ
  const { 
    data: service, 
    isLoading: isLoadingService,
    error: serviceError
  } = useQuery(['service', serviceId], () => serviceApi.getById(serviceId));

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —É—Å–ª—É–≥—É
  const {
    data: employees,
    isLoading: isLoadingEmployees,
    error: employeesError
  } = useQuery(
    ['serviceEmployees', serviceId], 
    async () => {
      if (service && service.employee_ids) {
        const employeePromises = service.employee_ids.map(id => 
          employeeApi.getById(id)
        );
        return Promise.all(employeePromises);
      }
      return [];
    },
    {
      enabled: !!service && !!service.employee_ids
    }
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
  const {
    data: availability,
    isLoading: isLoadingAvailability,
    error: availabilityError,
    refetch: refetchAvailability
  } = useQuery(
    ['serviceAvailability', serviceId, selectedEmployee?.id, selectedDate],
    () => serviceApi.getAvailability(
      serviceId, 
      selectedEmployee.id, 
      format(selectedDate, 'yyyy-MM-dd')
    ),
    {
      enabled: !!selectedEmployee && isValid(selectedDate)
    }
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const bookAppointmentMutation = useMutation(
    (appointmentData) => appointmentApi.create(appointmentData),
    {
      onSuccess: () => {
        setBookingComplete(true);
        setActiveStep(steps.length);
      },
      onError: (error) => {
        setBookingError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
      }
    }
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
  const handleNext = () => {
    if (activeStep === 1 && selectedEmployee) {
      refetchAvailability();
    }
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const handleConfirmBooking = () => {
    if (!selectedTime || !selectedEmployee || !service || !salonId) {
      setBookingError('–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±—Ä–∞–Ω—ã');
      return;
    }

    const appointmentData = {
      service_id: parseInt(serviceId),
      employee_id: selectedEmployee.id,
      salon_id: parseInt(salonId),
      date_time: selectedTime,
      notes: note
    };

    bookAppointmentMutation.mutate(appointmentData);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
  useEffect(() => {
    if (service && service.employee_ids && service.employee_ids.length > 0) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏
      setSelectedEmployee(null);
    }
  }, [service]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleFinish = () => {
    // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –µ–≥–æ –∑–∞–ø–∏—Å—è–º–∏ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    console.log('‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    if (user && user.role === 'client') {
      navigate('/client/appointments');
    } else {
      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
      navigate('/');
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const serviceData = service || {
    id: serviceId,
    name: '–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞',
    duration: 60,
    price: 1500,
    category: '–í–æ–ª–æ—Å—ã',
    description: '–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
    employee_ids: [1, 2],
    employee_names: ['–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞']
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const employeeList = employees || [
    {
      id: 1,
      name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
      role: 'employee',
      contact_info: { phone: '+7 (999) 123-45-67' },
      working_hours: {
        1: { start: '09:00', end: '18:00' },
        2: { start: '09:00', end: '18:00' },
        3: { start: '09:00', end: '18:00' },
        4: { start: '09:00', end: '18:00' },
        5: { start: '09:00', end: '18:00' }
      }
    },
    {
      id: 2,
      name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      role: 'employee',
      contact_info: { phone: '+7 (999) 765-43-21' },
      working_hours: {
        1: { start: '12:00', end: '21:00' },
        2: { start: '12:00', end: '21:00' },
        3: { start: '12:00', end: '21:00' },
        4: { start: '12:00', end: '21:00' },
        5: { start: '12:00', end: '21:00' }
      }
    }
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
  const availableSlots = availability?.available_slots || [
    '2025-03-25T10:00:00Z',
    '2025-03-25T11:00:00Z',
    '2025-03-25T13:00:00Z',
    '2025-03-25T14:00:00Z',
    '2025-03-25T16:00:00Z'
  ].map(slot => new Date(slot));

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
  const getStepNextButtonDisabled = (step) => {
    switch (step) {
      case 0: // –í—ã–±–æ—Ä –¥–∞—Ç—ã
        return !selectedDate || !isValid(selectedDate) || 
          isSameDay(selectedDate, new Date()) || 
          !isAfter(selectedDate, new Date());
      case 1: // –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
        return !selectedEmployee;
      case 2: // –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        return !selectedTime;
      case 3: // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return bookAppointmentMutation.isLoading;
      default:
        return false;
    }
  };

  if (isLoadingService) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (serviceError) {
    return (
      <Box sx={{ mt: 4 }}>
        <Alert severity="error">
          –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ: {serviceError.message}
        </Alert>
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
          <Button variant="contained" onClick={() => navigate(-1)}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box sx={{ mb: 4 }}>
      <Button 
        sx={{ mb: 2 }}
        onClick={() => navigate(-1)}
        startIcon={<Box sx={{ mr: -0.5, transform: 'rotate(180deg)' }}>‚Üí</Box>}
      >
        –ù–∞–∑–∞–¥
      </Button>
      
      <Card sx={{ mb: 3 }}>
        <CardHeader 
          title="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" 
          subheader={`–°–∞–ª–æ–Ω: ${serviceData.salon_name || '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã'}`}
        />
        <Divider />
        <CardContent>
          <Grid container spacing={3}>
            <Grid item xs={12} md={4}>
              <Typography variant="h6">
                {serviceData.name}
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {serviceData.duration} –º–∏–Ω.
              </Typography>
              <Typography variant="h6" color="primary" sx={{ mb: 2 }}>
                –°—Ç–æ–∏–º–æ—Å—Ç—å: {serviceData.price} ‚ÇΩ
              </Typography>
              {serviceData.description && (
                <Typography variant="body2">
                  {serviceData.description}
                </Typography>
              )}
            </Grid>
            
            <Grid item xs={12} md={8}>
              {bookingComplete ? (
                <Paper sx={{ p: 3, textAlign: 'center' }}>
                  <CheckCircleIcon color="success" sx={{ fontSize: 60, mb: 2 }} />
                  <Typography variant="h5" gutterBottom>
                    –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
                  </Typography>
                  <Typography variant="body1" paragraph>
                    –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {selectedTime && format(new Date(selectedTime), 'dd.MM.yyyy –≤ HH:mm')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.
                    –ú–∞—Å—Ç–µ—Ä {selectedEmployee?.name} –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
                  </Typography>
                  <Button 
                    variant="contained" 
                    onClick={handleFinish}
                    sx={{ mt: 2 }}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º
                  </Button>
                </Paper>
              ) : (
                <Stepper activeStep={activeStep} orientation="vertical">
                  {steps.map((step, index) => (
                    <Step key={step.label}>
                      <StepLabel>
                        <Typography variant="subtitle1">{step.label}</Typography>
                      </StepLabel>
                      <StepContent>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          {step.description}
                        </Typography>
                        
                        {index === 0 && (
                          <Box sx={{ mt: 2, mb: 2 }}>
                            <LocalizationProvider 
                              dateAdapter={AdapterDateFns}
                              adapterLocale={ruLocale}
                            >
                              <Box sx={{ mb: 2 }}>
                                <DatePicker 
                                  label="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                                  value={selectedDate}
                                  onChange={setSelectedDate}
                                  disablePast
                                  renderInput={(params) => <TextField {...params} fullWidth />}
                                />
                              </Box>
                              
                              {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ */}
                              <Typography variant="subtitle2" sx={{ mb: 1 }}>
                                –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã:
                              </Typography>
                              <Box 
                                sx={{ 
                                  display: 'flex', 
                                  gap: 1,
                                  flexWrap: 'wrap',
                                  justifyContent: 'center' 
                                }}
                              >
                                {Array.from({ length: 7 }, (_, i) => {
                                  const date = addDays(new Date(), i + 1);
                                  const isSelected = selectedDate && isSameDay(date, selectedDate);
                                  
                                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–Ω—è (–ø—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏)
                                  const dayOfWeek = date.getDay();
                                  let busyness = 'low'; // low, medium, high
                                  if (dayOfWeek === 0 || dayOfWeek === 6) {
                                    busyness = 'high'; // –≤—ã—Ö–æ–¥–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å–∏–ª—å–Ω–µ–µ
                                  } else if (dayOfWeek === 5) {
                                    busyness = 'medium'; // –ø—è—Ç–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ä–µ–¥–Ω–µ
                                  }
                                  
                                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
                                  const busynessColor = {
                                    low: 'success.main',
                                    medium: 'warning.main',
                                    high: 'error.main'
                                  }[busyness];
                                  
                                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
                                  const busynessText = {
                                    low: '–°–≤–æ–±–æ–¥–Ω–æ',
                                    medium: '–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
                                    high: '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å'
                                  }[busyness];
                                  
                                  return (
                                    <Paper
                                      key={i}
                                      elevation={isSelected ? 3 : 1}
                                      sx={{
                                        p: 1,
                                        width: { xs: 'calc(25% - 8px)', sm: 'calc(14.28% - 8px)' },
                                        textAlign: 'center',
                                        cursor: 'pointer',
                                        border: isSelected ? '2px solid' : '1px solid',
                                        borderColor: isSelected ? 'primary.main' : 'divider',
                                        bgcolor: isSelected ? 'primary.lighter' : 'background.paper',
                                        display: 'flex',
                                        flexDirection: 'column',
                                        alignItems: 'center',
                                        transition: 'all 0.2s',
                                        '&:hover': {
                                          borderColor: 'primary.main',
                                          bgcolor: 'primary.lighter',
                                          transform: 'translateY(-2px)'
                                        }
                                      }}
                                      onClick={() => setSelectedDate(date)}
                                    >
                                      <Typography 
                                        variant="caption" 
                                        sx={{ fontWeight: 500, textTransform: 'uppercase' }}
                                      >
                                        {format(date, 'EEE', { locale: ruLocale })}
                                      </Typography>
                                      <Typography 
                                        variant="h6" 
                                        sx={{ 
                                          fontWeight: isSelected ? 600 : 400,
                                          color: isSelected ? 'primary.main' : 'text.primary'
                                        }}
                                      >
                                        {format(date, 'd')}
                                      </Typography>
                                      <Typography variant="caption">
                                        {format(date, 'MMM', { locale: ruLocale })}
                                      </Typography>
                                      <Tooltip title={busynessText}>
                                        <Box 
                                          sx={{ 
                                            mt: 0.5, 
                                            width: '50%', 
                                            height: 3, 
                                            borderRadius: 3,
                                            bgcolor: busynessColor 
                                          }} 
                                        />
                                      </Tooltip>
                                    </Paper>
                                  );
                                })}
                              </Box>
                            </LocalizationProvider>
                          </Box>
                        )}
                        
                        {index === 1 && (
                          <Box sx={{ mt: 2, mb: 2 }}>
                            {isLoadingEmployees ? (
                              <CircularProgress size={24} sx={{ mt: 1 }} />
                            ) : employeesError ? (
                              <Alert severity="error" sx={{ mb: 2 }}>
                                –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Ç–µ—Ä–æ–≤: {employeesError.message}
                              </Alert>
                            ) : employeeList.length === 0 ? (
                              <Alert severity="warning">
                                –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
                              </Alert>
                            ) : (
                              <Box>
                                <FormControl component="fieldset" fullWidth>
                                  <FormLabel component="legend">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞</FormLabel>
                                  <Grid container spacing={2} sx={{ mt: 1 }}>
                                    {employeeList.map((employee) => (
                                      <Grid item xs={12} sm={6} md={4} key={employee.id}>
                                        <Paper 
                                          elevation={selectedEmployee?.id === employee.id ? 3 : 1} 
                                          sx={{ 
                                            p: 2, 
                                            cursor: 'pointer',
                                            border: selectedEmployee?.id === employee.id ? '2px solid' : '1px solid',
                                            borderColor: selectedEmployee?.id === employee.id ? 'primary.main' : 'divider',
                                            bgcolor: selectedEmployee?.id === employee.id ? 'primary.lighter' : 'background.paper',
                                            transition: 'all 0.2s',
                                            '&:hover': {
                                              borderColor: 'primary.main',
                                              bgcolor: 'primary.lighter',
                                              transform: 'translateY(-2px)'
                                            }
                                          }}
                                          onClick={() => setSelectedEmployee(employee)}
                                        >
                                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                            <Avatar 
                                              sx={{ 
                                                width: 60, 
                                                height: 60, 
                                                mr: 2,
                                                bgcolor: selectedEmployee?.id === employee.id ? 'primary.main' : 'grey.400'
                                              }}
                                            >
                                              {employee.name[0]}
                                            </Avatar>
                                            <Box>
                                              <Typography variant="subtitle1" component="div" sx={{ fontWeight: 500 }}>
                                                {employee.name}
                                              </Typography>
                                              <Typography variant="body2" color="text.secondary">
                                                –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: {employee.experience || "2 –≥–æ–¥–∞"}
                                              </Typography>
                                              {employee.rating && (
                                                <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                                                  <Rating value={employee.rating} precision={0.5} size="small" readOnly />
                                                  <Typography variant="body2" color="text.secondary" sx={{ ml: 1 }}>
                                                    ({employee.reviews_count || 12})
                                                  </Typography>
                                                </Box>
                                              )}
                                            </Box>
                                          </Box>
                                        </Paper>
                                      </Grid>
                                    ))}
                                  </Grid>
                                </FormControl>
                              </Box>
                            )}
                          </Box>
                        )}
                        
                        {index === 2 && (
                          <Box sx={{ mt: 2, mb: 2 }}>
                            {isLoadingAvailability ? (
                              <CircularProgress size={24} sx={{ mt: 1 }} />
                            ) : availabilityError ? (
                              <Alert severity="error" sx={{ mb: 2 }}>
                                –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {availabilityError.message}
                              </Alert>
                            ) : availableSlots.length === 0 ? (
                              <Alert severity="warning">
                                –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                              </Alert>
                            ) : (
                              <Box>
                                <Typography variant="subtitle2" gutterBottom>
                                  –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {format(selectedDate, 'dd.MM.yyyy (EEEE)', { locale: ruLocale })}
                                </Typography>
                                <Grid container spacing={1} sx={{ mt: 1 }}>
                                  {availableSlots.map((slot, idx) => {
                                    const isSelected = selectedTime && 
                                                      isSameDay(new Date(selectedTime), new Date(slot)) && 
                                                      format(new Date(selectedTime), 'HH:mm') === format(new Date(slot), 'HH:mm');
                                    return (
                                      <Grid item xs={4} sm={3} md={2} key={idx}>
                                        <Paper 
                                          elevation={isSelected ? 3 : 1}
                                          sx={{ 
                                            p: 1.5, 
                                            textAlign: 'center',
                                            cursor: 'pointer',
                                            border: isSelected ? '2px solid' : '1px solid',
                                            borderColor: isSelected ? 'primary.main' : 'divider',
                                            bgcolor: isSelected ? 'primary.lighter' : 'background.paper',
                                            transition: 'all 0.2s',
                                            '&:hover': {
                                              borderColor: 'primary.main',
                                              bgcolor: 'primary.lighter'
                                            }
                                          }}
                                          onClick={() => setSelectedTime(slot)}
                                        >
                                          <Typography 
                                            variant="subtitle1" 
                                            component="div"
                                            color={isSelected ? 'primary.main' : 'text.primary'}
                                            sx={{ fontWeight: isSelected ? 600 : 400 }}
                                          >
                                            {format(new Date(slot), 'HH:mm')}
                                          </Typography>
                                        </Paper>
                                      </Grid>
                                    );
                                  })}
                                </Grid>
                              </Box>
                            )}
                          </Box>
                        )}
                        
                        {index === 3 && (
                          <Box sx={{ mt: 2, mb: 2 }}>
                            <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                              <Typography variant="subtitle2" gutterBottom>
                                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:
                              </Typography>
                              <List dense>
                                <ListItem>
                                  <ListItemText 
                                    primary="–£—Å–ª—É–≥–∞"
                                    secondary={serviceData.name}
                                  />
                                </ListItem>
                                <ListItem>
                                  <ListItemText 
                                    primary="–ú–∞—Å—Ç–µ—Ä"
                                    secondary={selectedEmployee?.name}
                                  />
                                </ListItem>
                                <ListItem>
                                  <ListItemText 
                                    primary="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"
                                    secondary={selectedTime && format(new Date(selectedTime), 'dd.MM.yyyy HH:mm')}
                                  />
                                </ListItem>
                                <ListItem>
                                  <ListItemText 
                                    primary="–°—Ç–æ–∏–º–æ—Å—Ç—å"
                                    secondary={`${serviceData.price} ‚ÇΩ`}
                                  />
                                </ListItem>
                              </List>
                              
                              <TextField
                                label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                fullWidth
                                multiline
                                rows={3}
                                value={note}
                                onChange={(e) => setNote(e.target.value)}
                                variant="outlined"
                                margin="normal"
                              />
                              
                              {bookingError && (
                                <Alert severity="error" sx={{ mt: 2 }}>
                                  {bookingError}
                                </Alert>
                              )}
                            </Paper>
                          </Box>
                        )}
                        
                        <Box sx={{ mb: 2, display: 'flex', gap: 1 }}>
                          <Button
                            disabled={index === 0}
                            onClick={handleBack}
                            variant="outlined"
                          >
                            –ù–∞–∑–∞–¥
                          </Button>
                          <Button
                            variant="contained"
                            onClick={index === steps.length - 1 ? handleConfirmBooking : handleNext}
                            disabled={getStepNextButtonDisabled(index)}
                            startIcon={index === steps.length - 1 ? <EventAvailableIcon /> : null}
                          >
                            {index === steps.length - 1 ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–î–∞–ª–µ–µ'}
                          </Button>
                        </Box>
                      </StepContent>
                    </Step>
                  ))}
                </Stepper>
              )}
            </Grid>
          </Grid>
        </CardContent>
      </Card>
    </Box>
  );
};

export default BookingForm; 